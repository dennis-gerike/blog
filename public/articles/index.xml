<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on // - Dennis Gerike</title>
    <link>http://localhost:1313/articles/</link>
    <description>Recent content in Posts on // - Dennis Gerike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Background image by Lawrence Wang - CC BY 2.0 - flickr.com/photos/lawrenceyeah/9659161869</copyright>
    <lastBuildDate>Mon, 15 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to measure the test coverage of user stories in Jira?</title>
      <link>http://localhost:1313/articles/how-to-measure-the-test-coverage-of-user-stories-in-jira/2024/04/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/how-to-measure-the-test-coverage-of-user-stories-in-jira/2024/04/</guid>
      <description>&lt;p&gt;Creating &lt;strong&gt;code coverage reports&lt;/strong&gt; is easy these days.&#xA;For every major programming language there exist tools that can analyze which lines of code have been touched by the&#xA;unit tests â€“ and which were not.&#xA;With the help of these reports it is easy to find gaps in the test coverage and to locate dead code.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;code-coverage-example.png&#34; alt=&#34;Code Coverage Example&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Getting a &lt;strong&gt;feature coverage report&lt;/strong&gt; is much harder.&#xA;A code coverage tool doesn&amp;rsquo;t know anything about the features and how they are connected to the code or to the tests.&#xA;A project management tool on the other hand has all the information about the features, but has no clue about how they&#xA;are linked to the tests.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;test-vs-code-vs-feature.png&#34; alt=&#34;Tests vs Code vs Feature&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this article we will discover what is - in general - needed to generate such a feature coverage report.&#xA;And you will learn how it can be implemented in Jira, how to manage the user stories, requirements and acceptance tests,&#xA;how to come up with a useful coverage metric and how to actually visualize the numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Is the test pyramid compatible with BDD?</title>
      <link>http://localhost:1313/articles/is-the-test-pyramid-compatible-with-bdd/2024/02/</link>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/is-the-test-pyramid-compatible-with-bdd/2024/02/</guid>
      <description>&lt;p&gt;The test pyramid is a popular metaphor to describe how the testing efforts should be distributed in a software development project.&#xA;It recommends having many unit tests, some integration tests and a few end-2-end tests.&lt;/p&gt;&#xA;&lt;p&gt;One of the motivations behind BDD is to create a living documentation, usually described with Gherkin scenarios and implemented with Cucumber tests.&#xA;Those Cucumber tests are often seen as the tip of the testing pyramid.&#xA;But is this a valid assumption?&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;bdd-vs-testing-pyramid.png&#34; alt=&#34;Can you combine BDD with the test pyramid?&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Who wants what and why? The original meaning of a user story</title>
      <link>http://localhost:1313/articles/who-wants-what-and-why-the-original-meaning-of-a-user-story/2024/01/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/who-wants-what-and-why-the-original-meaning-of-a-user-story/2024/01/</guid>
      <description>&lt;p&gt;We have all seen them.&#xA;Gigantic &lt;em&gt;Jira&lt;/em&gt; user stories, filled with extensive specification, a truckload of screens for every conceivable device type and a list of things that are supposed to be acceptance criteria.&#xA;But, regardless of all the available information, in the end the programmed solution deviates significantly from what the stakeholder really wanted.&#xA;How is this possible?&#xA;Why does this happen?&#xA;How can we do better?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Saving time by using the IDE&#39;s linters and formatters</title>
      <link>http://localhost:1313/articles/saving-time-by-using-the-ides-linters-and-formatters/2024/01/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/saving-time-by-using-the-ides-linters-and-formatters/2024/01/</guid>
      <description>&lt;p&gt;How should code be indented - with tabs or with spaces?&#xA;Should the indentation be two or four spaces wide?&#xA;Should the opening curly brace be on the same line as the function declaration or on the next line?&#xA;Should there be an empty line before each return statement?&#xA;Should &amp;ldquo;yoda&amp;rdquo; conditions be allowed or even enforced?&#xA;Should unused variables be deleted?&lt;/p&gt;&#xA;&lt;p&gt;With each of those questions you can fill whole tech talks.&#xA;But does it make sense to discuss these questions in your team?&#xA;Does it make sense to define &lt;strong&gt;custom&lt;/strong&gt; rules, just for your project?&#xA;Is it worth the time and effort?&#xA;Will it save you time or money in the future?&#xA;Will the code quality be better compared to just using the &lt;strong&gt;standard&lt;/strong&gt; linting settings of the IDE?&#xA;Let&amp;rsquo;s explore the idea.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gherkin vs Cucumber vs BDD - What is the difference?</title>
      <link>http://localhost:1313/articles/gherkin-vs-cucumber-vs-bdd-what-is-the-difference/2024/01/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/gherkin-vs-cucumber-vs-bdd-what-is-the-difference/2024/01/</guid>
      <description>&lt;p&gt;The terms &lt;strong&gt;Gherkin&lt;/strong&gt;, &lt;strong&gt;Cucumber&lt;/strong&gt; and &lt;strong&gt;BDD&lt;/strong&gt; are closely related.&#xA;They mostly appear in the same context, but they are distinctly different things and cannot be used interchangeably.&#xA;In discussions, online articles or even in big test management tools they often get mixed up.&lt;/p&gt;&#xA;&lt;p&gt;If you try to find &lt;em&gt;&amp;ldquo;Gherkin alternatives&amp;rdquo;&lt;/em&gt; in your favorite search engine you will be presented with many &lt;em&gt;Cucumber&lt;/em&gt; alternatives, but nearly no results for &lt;em&gt;Gherkin&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The test management tool &amp;ldquo;Xray&amp;rdquo; - a 3rd party plugin for Jira - is also a bit sloppy when it comes to the wording.&#xA;You can switch the &amp;ldquo;Test Type&amp;rdquo; to &amp;ldquo;Cucumber&amp;rdquo; to then enter a &amp;ldquo;Gherkin&amp;rdquo; scenario into the input field below!?!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;xray-mixes-up-cucumber-and-gherkin.png&#34; alt=&#34;Cucumber and Gherkin mixed up in Xray&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Another common misconception is when people write tests in Gherkin and then think they are doing BDD.&#xA;Spoiler alert: this is (often) not the case.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
